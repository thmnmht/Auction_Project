{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["httpClient","Axios","create","baseURL","timeout","headers","SignupSchema","Yup","shape","password","required","min","passwordConfirm","test","value","this","parent","window","App","innerHeight","innerWidth","props","state","userToken","method","url","params","token","validPassword","then","response","alert","catch","error","status","numErrors","className","initialValues","validationSchema","onSubmit","values","handleSubmit","location","href","split","type","validate","setState","name","errors","style","marginTop","backgroundColor","buttonBackGroundHandler","Object","keys","length","borderColor","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAOMA,G,OAAaC,IAAMC,OAAO,CAC9BC,QAAS,yBACTC,QAAS,IACTC,QAAS,CAAC,eAAgB,uBAEtBC,EAAeC,WAAaC,MAAM,CACtCC,SAAUF,WACPG,SAAS,iIACTC,IAAI,EAAG,8IACVC,gBAAiBL,WACdM,KAAK,kBAAmB,+HAA4B,SAASC,GAC5D,OAAOC,KAAKC,OAAOP,WAAaK,M,EAIJG,OAqFnBC,G,EArFRC,Y,EAAaC,W,YAIlB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACb,SAAU,IAFP,E,0EAKNc,EAAWd,GACtBT,EAAW,CACTwB,OAAQ,OACRC,IAAK,cACLC,OAAQ,CACNC,MAAOJ,EACPK,cAAenB,KAGjBoB,KAAK,SAACC,GACNC,MAAM,kKACLC,MAAM,SAACC,GACRF,MAAME,EAAMC,Y,8CAIQC,GACtB,OAAgB,GAAbA,GAAyC,IAAvBpB,KAAKO,MAAMb,SACxB,OACD,S,+BAGC,IAAD,OACT,OACA,yBAAK2B,UAAY,OACf,yBAAKA,UAAY,iBAAjB,2KAGA,kBAAC,IAAD,CAEEC,cAAe,CACb5B,SAAU,GACVG,gBAAiB,IAEnB0B,iBAAkBhC,EAClBiC,SAAU,SAAAC,GACR,EAAKC,aAAaxB,OAAOyB,SAASC,KAAKC,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC5EJ,EAAO/B,YAGV,SAAAY,GAAK,OACJ,kBAAC,IAAD,KACC,yBAAKe,UAAY,cAAjB,wEAGC,6BACA,kBAAC,IAAD,CAAOS,KAAO,WAAWC,SAAY,SAAChC,GAAW,EAAKiC,SAAS,CAACtC,SAAUK,KACzEkC,KAAK,WAAWZ,UAAY,cAE7B,yBAAKA,UAAY,cACdf,EAAM4B,OAAOxC,UAGhB,yBAAK2B,UAAY,aAAac,MAAS,CAACC,UAAW,KAAnD,uGAGA,6BACA,kBAAC,IAAD,CAAQN,KAAO,WAAWG,KAAK,kBAAkBZ,UAAY,cAG7D,yBAAKA,UAAY,cACff,EAAM4B,OAAOrC,iBAEjB,4BAAQwB,UAAY,cACpBc,MAAS,CAACE,gBAAiB,EAAKC,wBAAwBC,OAAOC,KAAKlC,EAAM4B,QAAQO,QACvEC,YAAa,EAAKJ,wBAAwBC,OAAOC,KAAKlC,EAAM4B,QAAQO,UAF/E,mG,GAtEUE,IAAMC,YCZJC,QACW,cAA7B3C,OAAOyB,SAASmB,UAEe,UAA7B5C,OAAOyB,SAASmB,UAEhB5C,OAAOyB,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC,iB","file":"static/js/main.1f5fdce4.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage, setNestedObjectValues } from 'formik';\nimport * as Yup from \"yup\";\nimport '../src/App.css'\nimport Axios from 'axios'\nimport { timeout } from 'q';\n\nconst httpClient = Axios.create({\n  baseURL: 'http://192.168.10.150/',\n  timeout: 5000,\n  headers: {'content-type': 'application/json'}\n})\nconst SignupSchema = Yup.object().shape({\n  password: Yup.string()\n    .required('رمز عبور خود را وارد کنید')\n    .min(6, 'حداقل طول رمز عبور ۶ می باشد'),\n  passwordConfirm: Yup.string()\n    .test('passwords-match', 'با رمز عبور مطابقت ندارد', function(value) {\n      return this.parent.password === value;\n    }),\n});\n\nconst {innerHeight, innerWidth} = window\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {password: \"\"}\n  }\n\n  handleSubmit(userToken, password) {\n    httpClient({\n      method: 'POST',\n      url: 'users/reset',\n      params: {\n        token: userToken,\n        validPassword: password\n      }\n    }\n    ).then((response) => {\n      alert(\"ثبت رمز جدید با موفقیت انجام شد\")\n    }).catch((error) => {\n      alert(error.status)\n    })\n  } \n\n  buttonBackGroundHandler(numErrors) {\n    if(numErrors == 0 && this.state.password != \"\")\n     return 'blue'\n    return 'gray'\n    \n  }\n  render() {\n  return (\n  <div className = \"App\">\n    <div className = \"topLabelStyle\">\n      برای خودتون رمز عبور جدید بسازید\n    </div>\n    <Formik\n      \n      initialValues={{\n        password: '',\n        passwordConfirm: '',\n      }}\n      validationSchema={SignupSchema}\n      onSubmit={values => {\n        this.handleSubmit(window.location.href.split(\"?\")[1].split(\"=\")[1].split(\"&\")[0]\n        , values.password)\n      }}\n    >\n      {props=> (\n        <Form>\n         <div className = \"labelStyle\">\n         رمز عبور جدید\n         </div>\n          <div>\n          <Field type = \"password\" validate = {(value) => {this.setState({password: value})}}\n           name=\"password\" className = \"boxStyle\"/>\n          </div>\n          <div className = \"errorStyle\">\n            {props.errors.password}\n          </div>\n          \n          <div className = \"labelStyle\" style = {{marginTop: 30}}>\n         تکرار رمز عبور جدید\n         </div>\n          <div>\n          <Field  type = \"password\" name=\"passwordConfirm\" className = \"boxStyle\"/>\n          \n          </div>\n          <div className = \"errorStyle\">\n           {props.errors.passwordConfirm}\n          </div>   \n        <button className = \"buttonStyle\" \n        style = {{backgroundColor: this.buttonBackGroundHandler(Object.keys(props.errors).length),\n                   borderColor: this.buttonBackGroundHandler(Object.keys(props.errors).length)}}>\n          ثبت رمز عبور جدید</button>\n        </Form>\n      )}\n    </Formik>\n   \n  </div>\n);\n      }\n    }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}