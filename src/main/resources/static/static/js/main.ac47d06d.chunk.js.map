{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["httpClient","Axios","create","timeout","headers","SignupSchema","Yup","shape","password","required","min","passwordConfirm","test","value","this","parent","window","App","innerHeight","innerWidth","props","state","buttonDisabled","url","userToken","console","log","ToastsStore","warning","method","params","token","validPassword","then","response","success","catch","error","setState","numErrors","className","initialValues","validationSchema","onSubmit","values","handleSubmit","location","href","split","type","validate","name","errors","style","marginTop","backgroundColor","buttonBackGroundHandler","Object","keys","length","borderColor","position","ToastsContainerPosition","BOTTOM_RIGHT","store","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VAiBMA,EAAaC,IAAMC,OAAO,CAC9BC,QAAS,IACTC,QAAS,CAAE,eAAgB,sBAEvBC,EAAeC,WAAaC,MAAM,CACtCC,SAAUF,WACPG,SAAS,iIACTC,IAAI,EAAG,8IACVC,gBAAiBL,WAAaM,KAC5B,kBACA,+HACA,SAASC,GACP,OAAOC,KAAKC,OAAOP,WAAaK,M,EAKFG,OAqHrBC,G,EArHPC,Y,EAAaC,W,YAGnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEb,SAAU,GAAIc,gBAAgB,GAF5B,E,0EAKNC,EAAKC,EAAWhB,GAC3BiB,QAAQC,IAAIZ,KAAKO,MAAMC,gBACpBR,KAAKO,MAAMC,eACbK,cAAYC,QAAQ,0LAGnB5B,EAAW,CACT6B,OAAQ,OACRN,IAAKA,EAAM,eACXO,OAAQ,CACNC,MAAOP,EACPQ,cAAexB,KAGhByB,KAAK,SAAAC,GACJP,cAAYQ,QAAQ,kKAErBC,MAAM,SAAAC,GACLV,cAAYU,MAAM,mGAEtBvB,KAAKwB,SAAS,CAAChB,gBAAgB,O,8CAKXiB,GACtB,OACe,GAAbA,GACuB,IAAvBzB,KAAKO,MAAMb,UACVM,KAAKO,MAAMC,eAGP,OADE,S,+BAID,IAAD,OACP,OACE,yBAAKkB,UAAU,OACb,kBAAC,IAAD,CACEC,cAAe,CACbjC,SAAU,GACVG,gBAAiB,IAEnB+B,iBAAkBrC,EAClBsC,SAAU,SAAAC,GACR,EAAKC,aACH7B,OAAO8B,SAASC,KAAKC,MAAM,KAAK,GAChChC,OAAO8B,SAASC,QAQnB,SAAA3B,GAAK,OACJ,kBAAC,IAAD,KACE,yBAAKoB,UAAU,cAAf,wEACA,6BACE,kBAAC,IAAD,CACES,KAAK,WACLC,SAAU,SAAArC,GACR,EAAKyB,SAAS,CAAE9B,SAAUK,KAE5BsC,KAAK,WACLX,UAAU,cAGd,yBAAKA,UAAU,cAAcpB,EAAMgC,OAAO5C,UAE1C,yBAAKgC,UAAU,aAAaa,MAAO,CAAEC,UAAW,KAAhD,uGAGA,6BACE,kBAAC,IAAD,CACEL,KAAK,WACLE,KAAK,kBACLX,UAAU,cAGd,yBAAKA,UAAU,cAAcpB,EAAMgC,OAAOzC,iBAC1C,4BACE6B,UAAU,cACVa,MAAO,CACLE,gBAAiB,EAAKC,wBACpBC,OAAOC,KAAKtC,EAAMgC,QAAQO,QAE5BC,YAAa,EAAKJ,wBAChBC,OAAOC,KAAKtC,EAAMgC,QAAQO,UAPhC,2FAaA,8BAGA,kBAAC,kBAAD,CACEE,SAAUC,0BAAwBC,aAClCC,MAAOrC,wB,GAzGLsC,IAAMC,YCxBJC,QACW,cAA7BnD,OAAO8B,SAASsB,UAEe,UAA7BpD,OAAO8B,SAASsB,UAEhBpD,OAAO8B,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,iB","file":"static/js/main.ac47d06d.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage,\n  setNestedObjectValues\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../src/App.css\";\nimport Axios from \"axios\";\nimport { timeout } from \"q\";\nimport {\n  ToastsContainer,\n  ToastsStore,\n  ToastsContainerPosition\n} from \"react-toasts\";\nconst httpClient = Axios.create({\n  timeout: 5000,\n  headers: { \"content-type\": \"application/json\" }\n});\nconst SignupSchema = Yup.object().shape({\n  password: Yup.string()\n    .required(\"رمز عبور خود را وارد کنید\")\n    .min(6, \"حداقل طول رمز عبور ۶ می باشد\"),\n  passwordConfirm: Yup.string().test(\n    \"passwords-match\",\n    \"با رمز عبور مطابقت ندارد\",\n    function(value) {\n      return this.parent.password === value;\n    }\n  )\n});\n\nconst { innerHeight, innerWidth } = window;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { password: \"\", buttonDisabled: false };\n  }\n\n  handleSubmit(url, userToken, password) {\n    console.log(this.state.buttonDisabled)\n    if(this.state.buttonDisabled) {      \n     ToastsStore.warning(\"لینک ثبت رمز عبور جدید منقضی شده است\")\n    }    \n    else  {\n      httpClient({\n        method: \"POST\",\n        url: url + \"/users/reset\",\n        params: {\n          token: userToken,\n          validPassword: password\n        }\n      })\n        .then(response => {\n          ToastsStore.success(\"ثبت رمز جدید با موفقیت انجام شد\");\n        })\n        .catch(error => {\n          ToastsStore.error(\"عدم ارتباط با سرور\");\n        });\n      this.setState({buttonDisabled: true})\n    }\n\n  }\n\n  buttonBackGroundHandler(numErrors) {\n    if (\n      numErrors == 0 &&\n      this.state.password != \"\" &&\n      !this.state.buttonDisabled\n    )\n      return \"blue\";\n    return \"gray\";\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Formik\n          initialValues={{\n            password: \"\",\n            passwordConfirm: \"\"\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={values => {\n            this.handleSubmit(\n              window.location.href.split(\"/\")[0],\n              window.location.href\n              //   .split(\"?\")[1]\n              //   .split(\"=\")[1]\n              //   .split(\"&\")[0],\n              // values.password\n            );\n          }}\n        >\n          {props => (\n            <Form>\n              <div className=\"labelStyle\">رمز عبور جدید</div>\n              <div>\n                <Field\n                  type=\"password\"\n                  validate={value => {\n                    this.setState({ password: value });\n                  }}\n                  name=\"password\"\n                  className=\"boxStyle\"\n                />\n              </div>\n              <div className=\"errorStyle\">{props.errors.password}</div>\n\n              <div className=\"labelStyle\" style={{ marginTop: 30 }}>\n                تکرار رمز عبور جدید\n              </div>\n              <div>\n                <Field\n                  type=\"password\"\n                  name=\"passwordConfirm\"\n                  className=\"boxStyle\"\n                />\n              </div>\n              <div className=\"errorStyle\">{props.errors.passwordConfirm}</div>\n              <button\n                className=\"buttonStyle\"\n                style={{\n                  backgroundColor: this.buttonBackGroundHandler(\n                    Object.keys(props.errors).length\n                  ),\n                  borderColor: this.buttonBackGroundHandler(\n                    Object.keys(props.errors).length\n                  )\n                }}\n              >\n                ثبت رمز عبور جدید\n              </button>\n              <div>\n                {}\n              </div>\n              <ToastsContainer\n                position={ToastsContainerPosition.BOTTOM_RIGHT}\n                store={ToastsStore}\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}