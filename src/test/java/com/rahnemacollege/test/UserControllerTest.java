package com.rahnemacollege.test;/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.google.gson.Gson;
import com.rahnemacollege.domain.AuthenticationResponse;
import com.rahnemacollege.domain.SimpleUserDomain;
import com.rahnemacollege.domain.UserDomain;
import com.rahnemacollege.model.User;
import org.assertj.core.api.AssertionsForClassTypes;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class UserControllerTest extends InitTest {


    @Test
    public void me() throws Exception {
        UserDomain userDomain = getUserInfo();
        assertThat(userDomain.getName())
                .isEqualTo(user.getName());
        assertThat(userDomain.getEmail())
                .isEqualTo(user.getEmail());
    }

    @Test
    public void editName() throws  Exception{
        SimpleUserDomain simpleUserDomain = new SimpleUserDomain("ali","");
        user.setName("ali");
        String request = gson.toJson(simpleUserDomain);
        mvc.perform(MockMvcRequestBuilders.post(EDIT).header("auth",auth).contentType(MediaType.APPLICATION_JSON).content(request)).andExpect(status().isOk());
        UserDomain userDomain = getUserInfo();
        AssertionsForClassTypes.assertThat(userDomain.getName())
                .isEqualTo(user.getName());
        AssertionsForClassTypes.assertThat(userDomain.getEmail())
                .isEqualTo(user.getEmail());
    }

    @Test
    public void editEmail() throws Exception{
        SimpleUserDomain simpleUserDomain = new SimpleUserDomain("","invalid.email");
        String request = gson.toJson(simpleUserDomain);
        mvc.perform(MockMvcRequestBuilders.post(EDIT).header("auth",auth).contentType(MediaType.APPLICATION_JSON).content(request)).andExpect(status().is(443));
        UserDomain userDomain = getUserInfo();
        AssertionsForClassTypes.assertThat(userDomain.getName())
                .isEqualTo(user.getName());
        AssertionsForClassTypes.assertThat(userDomain.getEmail())
                .isEqualTo(user.getEmail());
    }

    @Test
    public void setPicture() throws Exception{
        MockMultipartFile profilePicture = new MockMultipartFile("picture", Image_PATH, "text/plain", "some xml".getBytes());
        mvc.perform(MockMvcRequestBuilders.multipart(EDIT_PICTURE).file(profilePicture).header("auth",auth)).andExpect(status().is(200));
    }



}